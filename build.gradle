/*
 * GE build file.
 */

//================================================
// Pre-execute

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = 'Forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        // Sonatype (for SpecialSource in 1.7+)
        maven {
            name = "Sonatype Nexus"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_ver}"
    }
}

apply plugin: 'kotlin'
apply plugin: 'net.minecraftforge.gradle.forge'

repositories {
    maven {
        name 'Forge'
        url 'http://files.minecraftforge.net/maven'
    }
    mavenCentral()
    maven {
        name 'MinecraftS3'
        url 'http://s3.amazonaws.com/Minecraft.Download/libraries'
    }
    maven {
        name 'Tethys (drakon.io)'
        url 'https://tethys.drakon.io/maven'
    }
}

group = "io.drakon.geneng"
archivesBaseName = "geneng"

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    // IE
    compile files(fileTree(dir: 'lib', includes: ['*.jar']))
    // Kotlin
    shade "io.drakon.forge:kotlin-adapter:${adapter_ver}"
    shade "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_ver}"
    //shade "org.jetbrains.kotlin:kotlin-reflect:${kotlin_ver}"
}

// Setup Forge plugin
minecraft {
    version = "$mc_ver-$forge_ver"
    mappings = mappings_ver
    runDir = 'run'
    replace '@VERSION@', mod_ver
    replace '@KOTLIN@', kotlin_ver
}

// Repackaging
reobf {
    jar {
        // Repackage PK lines are in repack.srg
        extraFiles file("repack.srg")
    }
}

//================================================
// Jar data

// Grab system env
def env = System.getenv()

version = "$mod_ver+$mc_ver"

// Version manifest
def verManifest = manifest {
    attributes("Mod-Version": mod_ver, "Forge-Version": "$mc_ver-$forge_ver", "Kotlin-Version": kotlin_ver)
}

processResources {
    // Make sure this gets re-executed on updates.
    inputs.property "version", version
    inputs.property "MCversion", mc_ver

    // Process mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        expand 'version': mod_ver, 'MCversion': mc_ver
    }

    // Copy anything else directly
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
    }
}

//================================================
// Jar tasks

jar {
    // Shading
    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }

    // Scrub Kotlins odd metadata files
    exclude '*.kotlin_class'

    // Merge Jenkins and Git manifests to form final manifest in final release jar
    manifest {
        from verManifest
    }
}
